plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    //쿼리 DSL 추가
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.cloudians'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

jar {    
   manifest { 
       attributes(
           'Main-Class': 'com.cloudians.CloudiansApplication' // your main class
       )
   }    
}

// bootJar 설정
bootJar {
    mainClass = 'com.cloudians.CloudiansApplication'
}


ext {
    queryDslVersion = "5.0.0"
}



repositories {
    mavenCentral()
}

dependencies {
    // spring boot
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.jcraft:jsch:0.1.55'
    implementation 'io.github.flashvayne:chatgpt-spring-boot-starter:1.0.4'


    implementation 'org.apache.sshd:sshd-core:2.7.0'
    implementation 'org.apache.sshd:sshd-common:2.7.0'
    implementation 'org.apache.sshd:sshd-netty:2.7.0'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Database driver
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Data Mapping
    // https://mvnrepository.com/artifact/org.modelmapper/modelmapper
    implementation 'org.modelmapper:modelmapper:2.4.4'

    // firebase stroage
    implementation group: 'com.google.firebase', name: 'firebase-admin', version: '9.3.0' // 최신 버전 확인 필요
    // implementation 'com.google.firebase:firebase-storage:20.0.0'

    // JWT Libraries
    implementation 'com.auth0:java-jwt:3.19.2'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    // Bcrypt
    implementation 'com.password4j:password4j:1.8.2'

    //쿼리DSL 추가
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
    implementation "com.querydsl:querydsl-core:${queryDslVersion}"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
  //  implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

}

tasks.named('test') {
    useJUnitPlatform()
}

//쿼리DSL 추가 빌드시작
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main {
        java {
            srcDir querydslDir // QueryDSL 관련 소스 디렉토리 설정
        }
        resources {
            srcDir 'src/main/resources' // 기본 리소스 디렉토리 설정
        }
    }
}
tasks.withType(JavaCompile) {
    options.compilerArgs
}
tasks.withType(Copy) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE // 또는 DuplicatesStrategy.INCLUDE
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
//쿼리DSL 추가 빌드끝